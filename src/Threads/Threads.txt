/*
thread class extends Object Class and implements Runnable interface

1)	start()	It is used to start the execution of the thread.
2)	run()	It is used to do an action for a thread.
3)	void	sleep()	It sleeps a thread for the specified amount of time.
4)	Thread	currentThread()	It returns a reference to the currently executing thread object.
5)	join()	It waits for a thread to die.
6)	int	getPriority()	It returns the priority of the thread.
7)	setPriority()	It changes the priority of the thread.
8)	getName()	It returns the name of the thread.
9)	setName()	It changes the name of the thread.
10) getId()	It returns the id of the thread.
11)	isAlive()	It tests if the thread is alive.
12)	yield()	It causes the currently executing thread object to pause and allow other threads to execute temporarily.
13)	suspend()	It is used to suspend the thread.
14)	resume()	It is used to resume the suspended thread.
15)	stop()	It is used to stop the thread.
16)	destroy()	It is used to destroy the thread group and all of its subgroups.
17)	isDaemon()	It tests if the thread is a daemon thread.
18)	setDaemon()	It marks the thread as daemon or user thread.
19)	interrupt()	It interrupts the thread.
20)	isinterrupted()	It tests whether the thread has been interrupted.
21)	interrupted()	It tests whether the current thread has been interrupted.
22)	activeCount()	It returns the number of active threads in the current thread's thread group.
23)	checkAccess()	It determines if the currently running thread has permission to modify the thread.
24)	holdLock()	It returns true if and only if the current thread holds the monitor lock on the specified object.
25)	dumpStack()	It is used to print a stack trace of the current thread to the standard error stream.
26)	getStackTrace()	It returns an array of stack trace elements representing the stack dump of the thread.
27)	int	enumerate()	It is used to copy every active thread's thread group and its subgroup into the specified array.
28)	getState()	It is used to return the state of the thread.
29)	getThreadGroup()	It is used to return the thread group to which this thread belongs
30)	toString()	It is used to return a string representation of this thread, including the thread's name, priority, and thread group.
31)	notify()	It is used to give the notification for only one thread which is waiting for a particular object.
32)	notifyAll()	It is used to give the notification to all waiting threads of a particular object.
33)	setContextClassLoader()	It sets the context ClassLoader for the Thread.
34)	getContextClassLoader()	It returns the context ClassLoader for the thread.
35)	Thread.UncaughtExceptionHandler	getDefaultUncaughtExceptionHandler()	It returns the default handler invoked when a thread abruptly terminates due to an uncaught exception.
36)	setDefaultUncaughtExceptionHandler()	It sets the default handler invoked when a thread abruptly terminates due to an uncaught exception.

** Thread States **
New: Whenever a new thread is created, it is always in the new state. For a thread in the new state, the code has not been run yet and thus has not begun its execution.
Active: When a thread invokes the start() method, it moves from the new state to the active state. The active state contains two states within it: one is runnable, and the other is running.
Runnable: A thread, that is ready to run is then moved to the runnable state. In the runnable state, the thread may be running or may be ready to run at any given instant of ti
Running: When the thread gets the CPU, it moves from the runnable to the running state. Generally, the most common change in the state of a thread is from runnable to running and again back to runnable.
Blocked or Waiting: Whenever a thread is inactive for a span of time (not permanently) then, either the thread is in the blocked state or is in the waiting state.
Timed Waiting: Sometimes, waiting for leads to starvation

Notes which approach is better? (runnable vs extends)
1. we cant extend any other class if we use extends
2. if we use runnable we can use other interfaces also

** join means the parent thread waits for the execution of the child thread

 */